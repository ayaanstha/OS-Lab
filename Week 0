//Week 0, Ayaan Shrestha, 1BM23CS056
//how to find the sum of every column(individually) in a matrix
//how to transpose a matrix.

#include <stdio.h>
int i, j;
int[][] create_matrix(){
    printf("Enter no. of rows: ");
    scanf("%d", &i);
    printf("Enter no. of columns: ");
    scanf("%d", &j);
    int[i][j] matrix;
    printf("Enter the matrix values:\n");
    for(int x=0; x<i;x++){
        printf("%d row:\n", i+1);
        for (int y=0; y<j; j++){
            scanf("%d", &matrix[x][y]);
        }
    }
    return matrix;
}

// 1. Write a program in C to find the second smallest element in an array.
#include <stdio.h>
#include <limits.h>

void findSecondSmallest(int arr[], int size) {
    if (size < 2) {
        printf("Array must contain at least two elements.\n");
        return;
    }
    
    int smallest = INT_MAX, secondSmallest = INT_MAX;
    
    for (int i = 0; i < size; i++) {
        if (arr[i] < smallest) {
            secondSmallest = smallest;
            smallest = arr[i];
        } else if (arr[i] < secondSmallest && arr[i] != smallest) {
            secondSmallest = arr[i];
        }
    }
    
    if (secondSmallest == INT_MAX) {
        printf("No second smallest element found.\n");
    } else {
        printf("The second smallest element is: %d\n", secondSmallest);
    }
}

int main() {
    int arr[] = {5, 1, 3, 8, 2, 4};
    int size = sizeof(arr) / sizeof(arr[0]);
    
    findSecondSmallest(arr, size);
    
    return 0;
}

// 2. Write a program in C to find the sum of the left diagonals of a matrix.
int ldiag_sum(int[i][j] matrix){
    int sum = 0;
    for(int x=0; x<i; x++){
        for(int y=0; y<j; y++){
            if(x==y){
                sum+=matrix[x][y];
            }
        }
    }
    return sum;
}

// 3. Write a program in C to find the sum of rows and columns of a matrix.

// 4. Write a program in C to count the total number of duplicate elements in an array.
int duplicate_count(int[i][j] matrix){
    for(int x=0; x<i;x++){
        for(int y=0; y<j;y++){
        
        }
    }
}

int find(int[x] array, int objToFind){
    // returns 1 if found, 0 if not found
    int result = 0;
    for (int i=0; i<x; i++){
        if (array[i]==objToFind){
            result=1;
            break;
        }
    }
    return result;
}
