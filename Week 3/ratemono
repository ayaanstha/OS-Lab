#include <stdio.h>
#include <stdlib.h>

#define MAX_TASKS 10

typedef struct {
    int id;
    int period;
    int execution_time;
    int remaining_time;
    int next_start_time;
} Task;

void sort_by_priority(Task tasks[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (tasks[j].period > tasks[j + 1].period) {
                Task temp = tasks[j];
                tasks[j] = tasks[j + 1];
                tasks[j + 1] = temp;
            }
        }
    }
}

void rms_scheduling(Task tasks[], int n, int total_time) {
    sort_by_priority(tasks, n);

    for (int t = 0; t < total_time; t++) {
        int executed = 0;
        int highest_priority_task = -1;

        for (int i = 0; i < n; i++) {
            if (tasks[i].remaining_time > 0 && t >= tasks[i].next_start_time) {
                highest_priority_task = i;
                break;
            }
        }

        if (highest_priority_task != -1) {
            printf("Time %d: Executing Task %d\n", t, tasks[highest_priority_task].id);
            tasks[highest_priority_task].remaining_time--;

            if (tasks[highest_priority_task].remaining_time == 0) {
                tasks[highest_priority_task].remaining_time = tasks[highest_priority_task].execution_time;
                tasks[highest_priority_task].next_start_time = t + tasks[highest_priority_task].period;
            }
            executed = 1;
        }

        if (!executed) {
            printf("Time %d: Idle\n", t);
        }
    }
}

int main() {
    Task tasks[MAX_TASKS];
    int num_tasks, total_time;

    printf("Enter number of tasks: ");
    scanf("%d", &num_tasks);

    if (num_tasks > MAX_TASKS) {
        printf("Error: Maximum number of tasks is %d\n", MAX_TASKS);
        return 1;
    }

    for (int i = 0; i < num_tasks; i++) {
        printf("Enter period and execution time for Task %d: ", i + 1);
        scanf("%d %d", &tasks[i].period, &tasks[i].execution_time);
        tasks[i].id = i + 1;
        tasks[i].remaining_time = tasks[i].execution_time;
        tasks[i].next_start_time = 0;
    }

    printf("Enter total simulation time: ");
    scanf("%d", &total_time);

    rms_scheduling(tasks, num_tasks, total_time);
    return 0;
}

